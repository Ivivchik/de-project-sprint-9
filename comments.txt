Привет, Кирилл)

1. По поводу cdm_loader. Хотел уйти от повторного написания запроса INSERT INTO ...
    Так как структру у этого запроса одинаковая, отличаются, только набор полей, которые инсертим.
    То как ты порекомендовал написать, если я правильно понимаю, будет два класса для product и category,
    в которых будет один и тот же метод inc, различия будут только в запросе.
    Я использовал написаный в dds метод, который как раз мне и собирает мой запрос на основе полей, которые есть 
    в моих отельных классов. Общий класс CDMGenericModel как раз нужен, для того что бы не писать два отдельных метода insert
    для продуктов и категорий. То есть если придется собирать еще одну витрину, то я просто добавлю новый класс в котором опишу
    метаинформацию(два метода для полуения названия таблицы и уникальный полей сделал,
    если их передать как обычные поля класса, то тогда ломается логика того, что при выполнение запроса,
    я не смогу передать cur.execute(query, case_class.dict()), потому что case_class.dict() вернет мне помимо занчений,
    которые надо вставить, еще название таблицы и список уникальный полей. Возможно можно эту инфу добавить с помощью той же библиотеки pydantic и не писать методы, но я не совсем понял как использовать orm) 
    и передам экземпляр этого класса в свой метод insert, вместо того, что бы писать еще отделный класс с захардкодиным запросом

    Просто по-твоему совету можно так же написать и dds сервис, но получится очень геморно, писать 14 инсерт запросов одинаковых


2. По поводу dds_loader и много одинакового кода. Много сидел над этим и никак не смог придумать, так что бы минимизировать повторяющийся код.

    Получаю нужные значения для таблиц из json.
    Для каждой таблицы создана функция, в которой идет формирования данных для вставки и сама вставка

    Если написать общую функцию для вставки то будет выглядить как-то так:
        common_insert(self, model: GenericModel) -> None: self._dds_repository.insert(model)

    То есть выглядит как функция ради функции.
    И в _message_processing я все равно не уйду от кол-во строк, так как перед тем как вызвать ф-ию common_insert,
    мне надо будет проинициализировать каждый класс
    например:
        h_order = HOrder(user_id=user_id, order_dt=ordet_dt, h_order_pk=h_order_pk)
        self.common_insert(h_order)
    
    И так 14 раз. И я подумал, что лучше будет написать отдельную функцию для формирования и встаки, каждой таблицы. 

    Если подскажешь как конекретно можно убрать эти повторения буду рад) 

И спасибо за проверку) 